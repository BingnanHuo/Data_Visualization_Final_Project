used_cars$Year <- factor(used_cars$Year, ordered = T)
summary(used_cars$Year)
wrong_state_names <- c("Az", "Ca", "Fl", "ga", "Ga", "Md", "Oh", "Va")
state_fix <- function(state_name) {
if (state_name %in% wrong_state_names) {
return(toupper(state_name))
} else
(return(state_name))
}
used_cars[, State := ifelse(State %in% wrong_state_names, toupper(State), State)]
# full_idx <- c()
# for (bad_state in wrong_state_names) {
#     tmp_idx <- which(used_cars$State == "AZ")
#     full_idx <- c(full_idx, tmp_idx)
# }
#
# for (row_num in full_idx) {
#     if (used_cars[row_num, "State"] %in% wrong_state_names) {
#         used_cars[row_num, "State"] <- toupper(used_cars[row_num, "State"])
#     }
# }
used_cars$State <- factor(used_cars$State)
summary(used_cars$State)
unique(used_cars$State)
str(used_cars)
states_coord <- fread("us_states_coord.csv")
used_cars[, mean(Price), State]
make_country <- fread("manufacturers.csv")
for (i in 1:nrow(make_country)) {
this_make <- make_country[i,Make]
this_country <- make_country[i,Country]
used_cars[Make == this_make, Country := this_country]
}
setkey(states_coord, state_code)
setkey(used_cars, Make)
for (state in unique(used_cars$State)) {
sorted <- used_cars[State==state, .N, by=list(Make)]
this_fav_make <- sorted[order(-N)]$Make[1]
states_coord[.(state), fav_make := this_fav_make]
}
for (state in unique(used_cars$State)) {
sorted2 <- used_cars[State==state, .N, by=list(Country)]
this_fav_country <- sorted2[order(-N)]$Country[1]
states_coord[.(state), fav_country := this_fav_country]
}
for (state in unique(used_cars$State)) {
num_car_by_state <- used_cars[,.N, State]
this_state_n <- num_car_by_state[State==state, N]
states_coord[.(state), num_listings := this_state_n]
}
for (state in unique(used_cars$State)) {
mean_price_by_state <- used_cars[,mean(Price), State]
this_mean <- mean_price_by_state[State==state, V1]
states_coord[.(state), mean_price := this_mean]
}
states_coord$fav_make <- factor(states_coord$fav_make)
# Got help from https://www.analytics-tuts.com/color-usa-map-based-on-a-categorical-variable-using-plotly-in-r/
states_coord$fav_make_val <- factor(as.numeric(states_coord$fav_make))
nfactor <- length(levels(states_coord$fav_make_val))
colr <- brewer.pal(n = nfactor,name = "Spectral")
names(colr) <- levels(states_coord$fav_make)
colrS <- function(n){
CUTS <- seq(0,1,length.out=n+1)
print(CUTS)
rep(CUTS,ifelse(CUTS %in% 0:1,1,2))
}
colorScale <- data.frame(z=colrS(nfactor),
col=rep(colr,each=2),
stringsAsFactors=FALSE)
states_coord$hover_text <- with(states_coord,
paste(state_name, '<br>', "Number of Listings:",
num_listings,"<br>","Favorite Make:", fav_make))
p <- plot_ly(data = states_coord,
type = "choropleth",
locations = ~state_code,
locationmode = "USA-states",
z = ~fav_make_val,
text = ~hover_text,
colorscale = colorScale,
colorbar = list(tickvals=1:nfactor,
ticktext=names(colr)) ) %>%
layout(geo = g) %>%
colorbar(title = "Favorate Make")
p
saveWidget(p, 'USA Map.html')
fig <- fig %>% colorbar(title = "Mean Price ($)")
fig <- fig %>% layout(
title = '2018 US States Used Cars Listing Price by State<br>(Hover for more details about listings)',
geo = g
)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showocean = TRUE,
oceancolor = toRGB("grey"),
showlakes = TRUE,
lakecolor = toRGB("LightBlue"),
showrivers = TRUE,
rivercolor = toRGB("LightBlue")
)
fig <- plot_geo(states_coord, locationmode = 'USA-states')
fig <- fig %>% add_trace(
z = ~mean_price, color = ~mean_price, text = ~hover_text, locations = ~state_code, colorscale= colorScale
)
# fig <- fig %>% add_trace(
#     z = ~total.exports, text = ~hover_text, locations = ~state_code,
#     color = ~fav_make, colors = 'Purples'
#   )
fig <- fig %>% colorbar(title = "Mean Price ($)")
fig <- fig %>% layout(
title = '2018 US States Used Cars Listing Price by State<br>(Hover for more details about listings)',
geo = g
)
ggplotly(fig)
set.seed(233)
PA_cars <- used_cars[State=="PA"]
#sample_index <- sample(nrow(PA_cars),1000)
PA_sample_index <- sample(nrow(PA_cars),300)
PA_sample <- PA_cars[PA_sample_index]
NY_cars <- used_cars[State=="NY"]
NY_sample_index <- sample(nrow(NY_cars),300)
NY_sample <- NY_cars[NY_sample_index]
NJ_cars <- used_cars[State=="NJ"]
NJ_sample_index <- sample(nrow(NJ_cars),300)
NJ_sample <- NJ_cars[NJ_sample_index]
AL_cars <- used_cars[State=="AL"]
AL_sample_index <- sample(nrow(AL_cars),300)
AL_sample <- AL_cars[AL_sample_index]
#sample_df <- rbind(PA_sample,NY_sample)
#sample_df <- rbind(sample_df, NJ_sample)
#sample_df <- rbind(sample_df, AL_sample)
sample_df <- rbind(PA_sample,AL_sample)
summary(sample_df)
library(plotly)
p0 <- ggplot(sample_df) +
geom_histogram(aes(x=Price, y = ..density.., fill=State), bins = 29, alpha=0.6) +
geom_density(aes(x=Price, color=State)) +
#ylim(0, 5) +
xlab("Price ($)") +
labs(title="Distribution of Prices of PA vs AL", fill="State")
ggsave("price_dist_by_state.png")
pn <- ggplot(sample_df, aes(x=Year, y=Mileage)) +
geom_point(aes(size=Price, color=State)) +
geom_point(aes(x=Year, y = Mileage, fill=State), bins = 29, alpha=0.6) +
geom_density(aes(x=Price, color=State)) +
#ylim(0, 5) +
xlab("Price ($)") +
labs(title="Distribution of Prices of PA vs AL", fill="State")
ggplotly(p0) %>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
title='Price ($)',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title='Density',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
title = 'Histogram and Density Plot of Prices by State')
#creating a dummy data table
DT <- data.table( ID = 1:50,
Capacity = sample(100:1000, size = 50, replace = F),
Code = sample(LETTERS[1:4], 50, replace = T),
State = rep(c("Alabama","Indiana","Texas","Nevada"), 50))
#simple data.table command
DT[Code == "C", mean(Capacity), State]
p1 <- ggplot(PA_sample, aes(x=Year, y=Mileage)) +
#geom_tile(aes(fill = Price)) +
geom_point(aes(size=Price)) +
scale_fill_distiller(palette = "YlGnBu", direction = 1) +
theme_light() +
labs(title = "Price",   y = "Mileage")
p1
#ggplotly(p1)
p2 <- ggplot(NY_sample, aes(x=Year, y=Mileage)) +
#geom_tile(aes(fill = Price)) +
geom_point(aes(size=Price)) +
scale_fill_distiller(palette = "YlGnBu", direction = 1) +
theme_light() +
labs(title = "Price",   y = "Mileage")
p2
#ggplotly(p2)
p3 <- ggplot(sample_df, aes(x=Year, y=Mileage)) +
#geom_tile(aes(fill = Price)) +
geom_point(aes(size=Price, fill=State)) +
scale_fill_distiller(palette = "YlGnBu", direction = 1) +
theme_light() +
labs(title = "Price",   y = "Mileage")
#p3
#ggplotly(p3)
p4 <- ggplot(sample_df, aes(x=Year, y=Mileage)) +
#geom_tile(aes(fill = Price)) +
geom_point(aes(size=Price, color=State)) +
#scale_fill_distiller(palette = "YlGnBu", direction = 1) +
#theme_light() +
labs(title = "Price ($)",   y = "Mileage (Mi)") +
ggtitle("Price by Year and Mileage, grouped by States")
p4
ggsave("price_by_year_&_mileage.png")
p3 <- ggplot(sample_df, aes(x=Year, y=Mileage)) +
#geom_tile(aes(fill = Price)) +
geom_point(aes(size=Price, fill=State)) +
scale_fill_distiller(palette = "YlGnBu", direction = 1) +
theme_light() +
labs(title = "Price",   y = "Mileage")
p3
pn <- ggplot(sample_df, aes(x=Year, y=Mileage)) +
geom_point(aes(size=Price, fill=State)) +
theme_light() +
labs(title = "Price",   y = "Mileage")
pn
pn <- ggplot(sample_df, aes(x=Year, y=Mileage)) +
geom_point(size=Price, fill=State) +
theme_light() +
labs(title = "Price",   y = "Mileage")
pn
bookdown:::serve_book()
devtools::install_github('rstudio/DT')
devtools::install_github("csgillespie/addinmanager")
updateR()
install.packages("installr")
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updater()
updater()
require(installr)
updater()
knitr::opts_chunk$set(echo = TRUE)
# Learn more about creating websites with Distill at:
# https://rstudio.github.io/distill/website.html
library(data.table)
library(ggplot2)
library(ggside)
library(ggthemes)
library(plotly)
library(htmlwidgets)
library(RColorBrewer)
used_cars <- fread(input = "true_car_listings.csv", drop = c("City", "Vin", "Model"))
#used_cars <- fread(input = "true_car_listings.csv")
str(used_cars)
used_cars <- used_cars[Year != 2018,]
used_cars$Year <- factor(used_cars$Year, ordered = T)
summary(used_cars$Year)
wrong_state_names <- c("Az", "Ca", "Fl", "ga", "Ga", "Md", "Oh", "Va")
state_fix <- function(state_name) {
if (state_name %in% wrong_state_names) {
return(toupper(state_name))
} else
(return(state_name))
}
used_cars[, State := ifelse(State %in% wrong_state_names, toupper(State), State)]
# full_idx <- c()
# for (bad_state in wrong_state_names) {
#     tmp_idx <- which(used_cars$State == "AZ")
#     full_idx <- c(full_idx, tmp_idx)
# }
#
# for (row_num in full_idx) {
#     if (used_cars[row_num, "State"] %in% wrong_state_names) {
#         used_cars[row_num, "State"] <- toupper(used_cars[row_num, "State"])
#     }
# }
used_cars$State <- factor(used_cars$State)
summary(used_cars$State)
unique(used_cars$State)
str(used_cars)
states_coord <- fread("us_states_coord.csv")
used_cars[, mean(Price), State]
make_country <- fread("manufacturers.csv")
for (i in 1:nrow(make_country)) {
this_make <- make_country[i,Make]
this_country <- make_country[i,Country]
used_cars[Make == this_make, Country := this_country]
}
setkey(states_coord, state_code)
setkey(used_cars, Make)
for (state in unique(used_cars$State)) {
sorted <- used_cars[State==state, .N, by=list(Make)]
this_fav_make <- sorted[order(-N)]$Make[1]
states_coord[.(state), fav_make := this_fav_make]
}
for (state in unique(used_cars$State)) {
sorted2 <- used_cars[State==state, .N, by=list(Country)]
this_fav_country <- sorted2[order(-N)]$Country[1]
states_coord[.(state), fav_country := this_fav_country]
}
for (state in unique(used_cars$State)) {
num_car_by_state <- used_cars[,.N, State]
this_state_n <- num_car_by_state[State==state, N]
states_coord[.(state), num_listings := this_state_n]
}
for (state in unique(used_cars$State)) {
mean_price_by_state <- used_cars[,mean(Price), State]
this_mean <- mean_price_by_state[State==state, V1]
states_coord[.(state), mean_price := this_mean]
}
states_coord$fav_make <- factor(states_coord$fav_make)
# Got help from https://www.analytics-tuts.com/color-usa-map-based-on-a-categorical-variable-using-plotly-in-r/
states_coord$fav_make_val <- factor(as.numeric(states_coord$fav_make))
nfactor <- length(levels(states_coord$fav_make_val))
colr <- brewer.pal(n = nfactor,name = "Spectral")
names(colr) <- levels(states_coord$fav_make)
colrS <- function(n){
CUTS <- seq(0,1,length.out=n+1)
print(CUTS)
rep(CUTS,ifelse(CUTS %in% 0:1,1,2))
}
colorScale <- data.frame(z=colrS(nfactor),
col=rep(colr,each=2),
stringsAsFactors=FALSE)
states_coord$hover_text <- with(states_coord,
paste(state_name, '<br>', "Number of Listings:",
num_listings,"<br>","Favorite Make:", fav_make))
p <- plot_ly(data = states_coord,
type = "choropleth",
locations = ~state_code,
locationmode = "USA-states",
z = ~fav_make_val,
text = ~hover_text,
colorscale = colorScale,
colorbar = list(tickvals=1:nfactor,
ticktext=names(colr)) ) %>%
layout(geo = g) %>%
colorbar(title = "Favorate Make")
p
saveWidget(p, 'USA Map.html')
fig <- fig %>% colorbar(title = "Mean Price ($)")
fig <- fig %>% layout(
title = '2018 US States Used Cars Listing Price by State<br>(Hover for more details about listings)',
geo = g
)
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showocean = TRUE,
oceancolor = toRGB("grey"),
showlakes = TRUE,
lakecolor = toRGB("LightBlue"),
showrivers = TRUE,
rivercolor = toRGB("LightBlue")
)
fig <- plot_geo(states_coord, locationmode = 'USA-states')
fig <- fig %>% add_trace(
z = ~mean_price, color = ~mean_price, text = ~hover_text, locations = ~state_code, colorscale= colorScale
)
# fig <- fig %>% add_trace(
#     z = ~total.exports, text = ~hover_text, locations = ~state_code,
#     color = ~fav_make, colors = 'Purples'
#   )
fig <- fig %>% colorbar(title = "Mean Price ($)")
fig <- fig %>% layout(
title = '2018 US States Used Cars Listing Price by State<br>(Hover for more details about listings)',
geo = g
)
ggplotly(fig)
set.seed(233)
PA_cars <- used_cars[State=="PA"]
#sample_index <- sample(nrow(PA_cars),1000)
PA_sample_index <- sample(nrow(PA_cars),300)
PA_sample <- PA_cars[PA_sample_index]
NY_cars <- used_cars[State=="NY"]
NY_sample_index <- sample(nrow(NY_cars),300)
NY_sample <- NY_cars[NY_sample_index]
NJ_cars <- used_cars[State=="NJ"]
NJ_sample_index <- sample(nrow(NJ_cars),300)
NJ_sample <- NJ_cars[NJ_sample_index]
AL_cars <- used_cars[State=="AL"]
AL_sample_index <- sample(nrow(AL_cars),300)
AL_sample <- AL_cars[AL_sample_index]
#sample_df <- rbind(PA_sample,NY_sample)
#sample_df <- rbind(sample_df, NJ_sample)
#sample_df <- rbind(sample_df, AL_sample)
sample_df <- rbind(PA_sample,AL_sample)
summary(sample_df)
library(plotly)
p0 <- ggplot(sample_df) +
geom_histogram(aes(x=Price, y = ..density.., fill=State), bins = 29, alpha=0.6) +
geom_density(aes(x=Price, color=State)) +
#ylim(0, 5) +
xlab("Price ($)") +
labs(title="Distribution of Prices of PA vs AL", fill="State")
ggsave("price_dist_by_state.png")
pn <- ggplot(sample_df, aes(x=Year, y=Mileage)) +
geom_point(aes(size=Price, fill=State)) +
theme_light() +
labs(title = "Price",   y = "Mileage")
ggplotly(p0) %>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
title='Price ($)',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title='Density',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
title = 'Histogram and Density Plot of Prices by State')
#creating a dummy data table
DT <- data.table( ID = 1:50,
Capacity = sample(100:1000, size = 50, replace = F),
Code = sample(LETTERS[1:4], 50, replace = T),
State = rep(c("Alabama","Indiana","Texas","Nevada"), 50))
#simple data.table command
DT[Code == "C", mean(Capacity), State]
p1 <- ggplot(PA_sample, aes(x=Year, y=Mileage)) +
#geom_tile(aes(fill = Price)) +
geom_point(aes(size=Price)) +
scale_fill_distiller(palette = "YlGnBu", direction = 1) +
theme_light() +
labs(title = "Price",   y = "Mileage")
p1
#ggplotly(p1)
p2 <- ggplot(NY_sample, aes(x=Year, y=Mileage)) +
#geom_tile(aes(fill = Price)) +
geom_point(aes(size=Price)) +
scale_fill_distiller(palette = "YlGnBu", direction = 1) +
theme_light() +
labs(title = "Price",   y = "Mileage")
p2
#ggplotly(p2)
p3 <- ggplot(NJ_sample, aes(x=Year, y=Mileage)) +
#geom_tile(aes(fill = Price)) +
geom_point(aes(size=Price, fill=State)) +
scale_fill_distiller(palette = "YlGnBu", direction = 1) +
theme_light() +
labs(title = "Price",   y = "Mileage")
#p3
#ggplotly(p3)
p4 <- ggplot(sample_df, aes(x=Year, y=Mileage)) +
#geom_tile(aes(fill = Price)) +
geom_point(aes(size=Price, color=State)) +
#scale_fill_distiller(palette = "YlGnBu", direction = 1) +
#theme_light() +
labs(title = "Price ($)",   y = "Mileage (Mi)") +
ggtitle("Price by Year and Mileage, grouped by States")
p4
ggsave("price_by_year_&_mileage.png")
mean_prices_all_states <- c()
for (i in 1997:2017) {
print(i)
print(mean(used_cars$Price[used_cars$Year==i]))
mean_prices_all_states <- c(mean_prices_all_states, mean(used_cars$Price[used_cars$Year==i]))
}
mean_prices_by_year <- data.frame(list(Mean_Price=mean_prices_all_states,Year=1997:2017))
mean_prices_all_states
used_cars[,mean(Price), Year]
ggplot(mean_prices_by_year, aes(x=Year, y=Mean_Price)) +
geom_point() +
geom_smooth() +
ggtitle("Mean Price by Year") +
xlab("Year") +
ylab("Price ($)")
ggsave("mean_price_by_year.png")
mean_prices_by_states <- c()
states <- rep(unique(used_cars$State), times=length(1997:2017))
years <- rep(1997:2017, each=length(unique(used_cars$State)))
mean_price <- rep(0,length(years))
mean_prices_by_year_n_state <- data.frame(states, years,mean_price)
for (i in 1:nrow(mean_prices_by_year_n_state)) {
this_state <- mean_prices_by_year_n_state[i,1]
this_year <- mean_prices_by_year_n_state[i,2]
this_mean_price <- mean(used_cars$Price[used_cars$Year==this_year & used_cars$State==this_state])
mean_prices_by_year_n_state[i,3] <- this_mean_price
}
used_cars[,State, Year]
all_data <- data.table()
for (i in 1997:2017) {
states_mean <- used_cars[Year==i, mean(Price), State]
setnames(states_mean, 'V1', 'mean_price')
with_year <- data.table(rep(i, times=nrow(states_mean)), states_mean)
setnames(with_year, 'V1', 'years')
all_data <- rbind(all_data, with_year)
}
all_data[1183,]
p10 <- ggplot(mean_prices_by_year_n_state, aes(x=years, y=mean_price, color=states)) +
geom_point() +
#    geom_smooth() +
ggtitle("Mean Price by Year and State") +
xlab("Year") +
ylab("Price ($)")
ggplotly(p10)
all_data
p11 <- ggplot(all_data, aes(x=years, y=mean_price, color=State)) +
geom_point() +
#    geom_smooth() +
ggtitle("Mean Price by Year and State") +
xlab("Year") +
ylab("Price ($)")
p11
ggplotly(p11)
for (i in levels(used_cars$State)) {
print(i)
print(nrow(used_cars[State==i & Year==1997]))
}
devtools::install_github('rstudio/DT')
devtools::install_github("csgillespie/addinmanager")
require("devtools")
devtools::install_github('rstudio/DT')
devtools::install_github("csgillespie/addinmanager")
